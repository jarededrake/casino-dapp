{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ABI","abi","App","props","contractAddress","validBets","state","winningNumber","numberOfBets","minimumBet","totalBet","maxNumberOfBets","currentBet","window","ethereum","web3","Web3","enable","console","log","this","providers","HttpProvider","contract","eth","Contract","contractInstance","activateWeb3","updateState","methods","call","setState","parseFloat","utils","fromWei","getContractBalance","number","bet","alert","send","gas","from","accounts","currentProvider","selectedAddress","value","toWei","result","className","parseInt","ref","type","onChange","evt","target","placeholder","map","onClick","voteNumber","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.afbad3e4.chunk.js","sourcesContent":["import React from \"react\";\nimport Web3 from \"web3\";\n\nimport \"./App.css\";\nimport CasinoInterface from \"./contracts/Casino.json\";\n\nconst ABI = CasinoInterface.abi;\n\n// REPLACE WITH YOUR OWN KEY\nconst INFURA_KEY = \"25ed13c7cd79450d917ab1a918c43ecc\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Change this to your contract address\n    this.contractAddress = \"0x3854b9B3009F2cDB418480e1A21684Ef88A1D56d\";\n\n    this.validBets = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    this.state = {\n      winningNumber: 0,\n      numberOfBets: 0,\n      minimumBet: 0,\n      totalBet: 0,\n      maxNumberOfBets: 0,\n      currentBet: 0,\n    };\n  }\n\n  async activateWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      try {\n        // Request account access.\n        await window.ethereum.enable();\n      } catch (error) {\n        console.log(\"Access Denied\");\n      }\n    }\n\n    if (typeof Web3 != \"undefined\") {\n      console.log(\"Using Web3 detected from external source like Metamask\");\n      this.web3 = new Web3(window.ethereum);\n    } else {\n      console.log(\"No web3 detected. Falling back to HTTP provider.\");\n      this.web3 = new Web3(\n        new Web3.providers.HttpProvider(\n          `https://ropsten.infura.io/v3/${INFURA_KEY}`\n        )\n      );\n    }\n\n    const contract = new this.web3.eth.Contract(ABI, this.contractAddress);\n    this.contractInstance = contract;\n  }\n\n  async componentDidMount() {\n    await this.activateWeb3();\n    await this.updateState();\n  }\n\n  async updateState() {\n    const minimumBet = await this.contractInstance.methods.minimumBet().call();\n    this.setState({\n      minimumBet: parseFloat(Web3.utils.fromWei(minimumBet, \"ether\")),\n    });\n\n    const totalBet = await this.contractInstance.methods\n      .getContractBalance()\n      .call();\n    this.setState({\n      totalBet: parseFloat(Web3.utils.fromWei(totalBet, \"ether\")),\n    });\n\n    const numberOfBets = await this.contractInstance.methods\n      .numberOfBets()\n      .call();\n    this.setState({\n      numberOfBets: numberOfBets,\n    });\n\n    const maxNumberOfBets = await this.contractInstance.methods\n      .maxNumberOfBets()\n      .call();\n    this.setState({\n      maxNumberOfBets: maxNumberOfBets,\n    });\n\n    const winningNumber = await this.contractInstance.methods\n      .winningNumber()\n      .call();\n    this.setState({\n      winningNumber: winningNumber,\n    });\n  }\n\n  async voteNumber(number) {\n    let bet = this.state.currentBet;\n\n    if (parseFloat(bet) < this.state.minimumBet) {\n      alert(\"You must bet more than the minimum\");\n    } else {\n      const result = await this.contractInstance.methods.bet(number).send({\n        gas: 3000000,\n        from: window.web3.eth.accounts.currentProvider.selectedAddress,\n        value: Web3.utils.toWei(bet, \"ether\"),\n      });\n      console.log(result);\n    }\n  }\n\n  render() {\n    return (\n      <div className='main-container'>\n        <h1>Bet for your best number and win huge amounts of Ether</h1>\n\n        <div className='block'>\n          <b>Number of bets:</b> &nbsp;\n          <span>{this.state.numberOfBets}</span>\n        </div>\n\n        <div className='block'>\n          <b>Last winning number:</b> &nbsp;\n          <span>\n            {parseInt(this.state.winningNumber) === 0\n              ? \"No draws yet\"\n              : this.state.winningNumber}\n          </span>\n        </div>\n\n        <div className='block'>\n          <b>Total ether bet:</b> &nbsp;\n          <span>{this.state.totalBet} ether</span>\n        </div>\n\n        <div className='block'>\n          <b>Minimum bet:</b> &nbsp;\n          <span>{this.state.minimumBet} ether</span>\n        </div>\n\n        <div className='block'>\n          <b>Max number of bets:</b> &nbsp;\n          <span>{this.state.maxNumberOfBets}</span>\n        </div>\n\n        <hr />\n\n        <h2>Vote for the next number</h2>\n\n        <label>\n          <b>\n            How much Ether do you want to bet?{\" \"}\n            <input\n              className='bet-input'\n              ref='ether-bet'\n              type='number'\n              onChange={(evt) => {\n                this.setState({\n                  currentBet: evt.target.value,\n                });\n              }}\n              placeholder={\"Enter Bet\"}\n            />\n          </b>{\" \"}\n          ether\n          <br />\n        </label>\n\n        <ul ref='numbers'>\n          {this.validBets.map((bet) => {\n            return (\n              <li\n                onClick={() => {\n                  this.voteNumber(bet);\n                }}\n              >\n                {bet}\n              </li>\n            );\n          })}\n        </ul>\n\n        <hr />\n\n        <div>\n          <i>Only working with the Ropsten Test Network</i>\n        </div>\n        <div>\n          <i>You can only vote once per account</i>\n        </div>\n        <div>\n          <i>Your vote will be reflected when the next block is mined</i>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}